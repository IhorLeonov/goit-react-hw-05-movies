{"version":3,"file":"static/js/286.f3c646d6.chunk.js","mappings":"sRAEaA,EAAWC,EAAAA,GAAAA,GAAH,6HAQRC,EAAWD,EAAAA,GAAAA,GAAH,6CAIRE,EAAWF,EAAAA,GAAAA,EAAH,yI,SCoDrB,EA5Da,WACX,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAoBC,EAAAA,EAAAA,MAAbC,GAAP,eAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAkB,IAAIC,gBACtBC,EAAe,CAAEC,OAAQH,EAAgBG,QAHjC,wCAKd,8GAEuBC,EAAAA,EAAAA,IAAed,EAASY,GAF/C,OAEUG,EAFV,OAGIX,EAAaW,EAAKC,MAClBV,GAAa,GAJjB,mDAMqB,iBAAb,KAAIW,KANZ,mDAQIC,QAAQC,IAAI,SARhB,sGALc,sBAmBd,OAnBc,mCAkBdC,GACO,kBAAMV,EAAgBW,OAAtB,CACR,GAAE,CAACrB,KAGF,8BACGQ,IACC,UAACZ,EAAD,WACGO,EAAUmB,OAAS,GAClBnB,EAAUoB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACZ,UAAC7B,EAAD,YACE,yBACG2B,GACC,gBACEG,IAAG,yCAAoCH,GACvCI,IAAG,iBAAYH,GACfI,MAAM,QACNC,OAAO,WAGT,kCAAUL,EAAV,sBAGJ,SAAC3B,EAAD,UAAW2B,KACX,UAAC3B,EAAD,yBAAsB4B,OAdTH,EADH,IAkBM,IAArBrB,EAAUmB,SAAiBjB,IAC1B,yFAMX,C,2NC9DK2B,EAAW,gCACXC,EAAU,mCAEHC,EAAe,mCAAG,WAAMtB,GAAN,gFACvBuB,EADuB,UACdH,EADc,sCACwBC,EADxB,oBAENG,EAAAA,EAAAA,IAAUD,EAAKvB,GAFT,cAEvByB,EAFuB,yBAGtBA,EAAStB,MAHa,2CAAH,sDAMfuB,EAAc,mCAAG,WAAOC,EAAO3B,GAAd,gFACtBuB,EADsB,UACbH,EADa,gCACmBC,EADnB,kBACoCM,EADpC,uDAELH,EAAAA,EAAAA,IAAUD,EAAKvB,GAFV,cAEtByB,EAFsB,yBAGrBA,EAAStB,MAHY,2CAAH,wDAMdyB,EAAgB,mCAAG,WAAOxC,EAASY,GAAhB,gFACxBuB,EADwB,UACfH,EADe,iBACEhC,EADF,oBACqBiC,EADrB,4BAEPG,EAAAA,EAAAA,IAAUD,EAAKvB,GAFR,cAExByB,EAFwB,yBAGvBA,EAAStB,MAHc,2CAAH,wDAMhBD,EAAc,mCAAG,WAAOd,EAASY,GAAhB,gFACtBuB,EADsB,UACbH,EADa,iBACIhC,EADJ,4BAC+BiC,EAD/B,4BAELG,EAAAA,EAAAA,IAAUD,EAAKvB,GAFV,cAEtByB,EAFsB,yBAGrBA,EAAStB,MAHY,2CAAH,wDAMd0B,EAAe,mCAAG,WAAOzC,EAASY,GAAhB,gFACvBuB,EADuB,UACdH,EADc,iBACGhC,EADH,4BAC8BiC,EAD9B,mCAENG,EAAAA,EAAAA,IAAUD,EAAKvB,GAFT,cAEvByB,EAFuB,yBAGtBA,EAAStB,MAHa,2CAAH,wDAMf2B,EAAa,mCAAG,WAAO1C,EAASY,GAAhB,gFACrBuB,EADqB,UACZH,EADY,iBACKhC,EADL,2BAC+BiC,GAD/B,SAEJG,EAAAA,EAAAA,IAAUD,EAAKvB,GAFX,cAErByB,EAFqB,yBAGpBA,EAAStB,MAHW,2CAAH,uD","sources":["components/cast/Cast.styled.jsx","components/cast/Cast.js","components/services/themoviedbAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  margin-top: 15px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  justify-content: center;\n`;\n\nexport const CastItem = styled.li`\n  margin-top: 15px;\n`;\n\nexport const CastDesc = styled.p`\n  margin-top: 15px;\n\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  width: 265px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getCastOfMovie } from 'components/services/themoviedbAPI';\nimport { CastDesc, CastItem, CastList } from './Cast.styled';\nimport { useOutletContext } from 'react-router-dom';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isVisible] = useOutletContext();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const abortController = new AbortController();\n    const abortOptions = { signal: abortController.signal };\n\n    async function fetchCast() {\n      try {\n        const data = await getCastOfMovie(movieId, abortOptions);\n        setMovieCast(data.cast);\n        setIsLoading(false);\n      } catch (err) {\n        if (err.code === 'ERR_CANCELED') return;\n\n        console.log('Error');\n      } finally {\n      }\n    }\n\n    fetchCast();\n    return () => abortController.abort();\n  }, [movieId]);\n\n  return (\n    <>\n      {isVisible && (\n        <CastList>\n          {movieCast.length > 0 &&\n            movieCast.map(({ id, profile_path, name, character }) => (\n              <CastItem key={id}>\n                <div>\n                  {profile_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                      alt={`Poster ${name}`}\n                      width=\"280px\"\n                      height=\"420px\"\n                    />\n                  ) : (\n                    <p>Photo {name} must be here</p>\n                  )}\n                </div>\n                <CastDesc>{name}</CastDesc>\n                <CastDesc>Character: {character}</CastDesc>\n              </CastItem>\n            ))}\n          {movieCast.length === 0 && !isLoading && (\n            <p>We don't have any information about cast for this movies.</p>\n          )}\n        </CastList>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'a59dfea75e9e40e203f0819879862061';\n\nexport const getPopularFilms = async abortOptions => {\n  const url = `${BASE_URL}trending/movie/day?api_key=${API_KEY}&page=1`;\n  const response = await axios.get(url, abortOptions);\n  return response.data;\n};\n\nexport const getMovieByName = async (quary, abortOptions) => {\n  const url = `${BASE_URL}search/movie?api_key=${API_KEY}&query=${quary}&page=1&language=en-US&include_adult=false`;\n  const response = await axios.get(url, abortOptions);\n  return response.data;\n};\n\nexport const getInfoByMovieId = async (movieId, abortOptions) => {\n  const url = `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n  const response = await axios.get(url, abortOptions);\n  return response.data;\n};\n\nexport const getCastOfMovie = async (movieId, abortOptions) => {\n  const url = `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`;\n  const response = await axios.get(url, abortOptions);\n  return response.data;\n};\n\nexport const getMovieReviews = async (movieId, abortOptions) => {\n  const url = `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`;\n  const response = await axios.get(url, abortOptions);\n  return response.data;\n};\n\nexport const getMovieVideo = async (movieId, abortOptions) => {\n  const url = `${BASE_URL}movie/${movieId}/videos?api_key=${API_KEY}`;\n  const response = await axios.get(url, abortOptions);\n  return response.data;\n};\n"],"names":["CastList","styled","CastItem","CastDesc","movieId","useParams","useState","movieCast","setMovieCast","isLoading","setIsLoading","useOutletContext","isVisible","useEffect","abortController","AbortController","abortOptions","signal","getCastOfMovie","data","cast","code","console","log","fetchCast","abort","length","map","id","profile_path","name","character","src","alt","width","height","BASE_URL","API_KEY","getPopularFilms","url","axios","response","getMovieByName","quary","getInfoByMovieId","getMovieReviews","getMovieVideo"],"sourceRoot":""}